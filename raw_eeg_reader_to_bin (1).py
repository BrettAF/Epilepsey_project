# -*- coding: utf-8 -*-
"""Raw EEG Reader to bin

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LjnYNPA6AB0V-ZDI3Kc7UNqp8T5W1CnP
"""

#!pip install mne

import pandas as pd
import numpy as np
import csv
import mne
import regex as re
from mne.io import Raw
from mne import read_events
import os

#These channels are consistent across all the subjects. Theyare the only ones I Plan to use
consistent_channels=["Time","# FP1-F7","FP1-F7","F7-T7", "T7-P7", "P7-O1", "FP1-F3", "F3-C3", "C3-P3","P3-O1", "FP2-F4","F4-C4", "C4-P4", "P4-O2", "FP2-F8", "F8-T8", "T8-P8", "T8-P8-0","P8-O2", "FZ-CZ","CZ-PZ","Label","EEG Time"]

def summaryReader(folder):
  date_time = [0,0,0]
  eeg_files =[]
  file_start_times =[]
  seizure_start_times = [0]
  seizure_end_times = [0]
  print(folder)

  file_end_time=0
  summary_name = folder+'-summary.txt'
  print(summary_name)
  summaryfile=open(summary_name,"r")
  for line in summaryfile:

    #Looks for files that need to be opened
    fn_search=re.search("\S+.edf",line)
    if fn_search:
      toopen=line[(fn_search.span()[0]):(fn_search.span()[1]-4)]
      eeg_files.append(toopen)

    #Looks the time files started at
    st_search=re.search("File Start Time: \S+",line)
    if st_search:
      starttime=line[(st_search.span()[0]+17):(st_search.span()[1])]
      previous_time = int(date_time[0])
      date_time = starttime.split(':')


      #Does conversions to seconds
      date_time[0]=int(date_time[0])

      #This while loop wraps midnight arround to keep numbers consistent
      while date_time[0] < previous_time:
        date_time[0] =  date_time[0] + 24

      hour_seconds    = int(date_time[0]) * 60 * 60
      minute_seconds  = int(date_time[1]) * 60
      seconds_seconds = int(date_time[2])

      #This lists the time since the EEG began recording in seconds
      time_since_recording_began = hour_seconds+minute_seconds+seconds_seconds
      file_start_times.append(time_since_recording_began)

    #This lists the time the seizures began
    ss_search=re.match("Seizure \d*\s*Start Time: (\d+)",line)
    if ss_search:
      seizure_start_times.append(time_since_recording_began + int(ss_search.group(1)))
    #This searches for seizure end
    se_search = re.match("Seizure \d*\s*End Time: (\d+)",line)
    if se_search:
      seizure_end_times.append(time_since_recording_began + int(se_search.group(1)))
    se_search = re.match("File End Time: (\d+):(\d+):(\d+)",line)
    if se_search:
      file_end_time=int(se_search.group(1))*60*60+int(se_search.group(2))*60+int(se_search.group(3))
  print(eeg_files)
  print(file_start_times)
  while(file_end_time<file_start_times[-1]):
    file_end_time+=(24*60*60)
  print(file_end_time)
  return   eeg_files, file_start_times, seizure_start_times, seizure_end_times,file_end_time

# This function assigns a label to the data based on the time until the next seizure
def assignLabel(time,seizure_start_times,seizure_end_times, subject_end_time ):
  for i in range(0,len(seizure_start_times)):
    #if it is before a seizure
    if (time >=seizure_end_times[i-1]) and (time<=seizure_start_times[i]):
      return seizure_start_times[i]-time
    #if it is during a seizure
    elif(time>seizure_start_times[i]) and (time <seizure_end_times[i]):
      return seizure_start_times[i]-time

  #if it is at the end of the file
  return 0

def convertEDF(filename):
#filename = 'chb01_01'
  raw = mne.io.read_raw_edf(filename+'.edf', preload=True)
  header = raw.ch_names
  raw.filter( l_freq=0.2, h_freq=None)
  return raw.get_data(), header

def column_checker(header):
  returnvector=[]
  columns_to_remove=[]
  for i in range(0,len(header)):
      for j in range(0,len(consistent_channels)):
          if header[i]==consistent_channels[j]:
            returnvector.append(int(i))
  for k in range(0,len(header)):
    if k not in returnvector:
      columns_to_remove.append(int(k))
  return returnvector, columns_to_remove

#print(column_checker(["FP1-F7",'ftg', "F7-T7", "T7-P7", "P7-O1","FP1-F3", "F3-C3", "C3-P3", "P3-O1", "FP2-F4", "F4-C4", "C4-P4", "P4-O2","FP2-F8", "F8-T8", "T8-P8", "P8-O2", "FZ-CZ", "CZ-PZ","C4-P6"]))

#This applies lables to a np bin file
def convertFileToNP(file_name, recording_start_time,seizure_start_times, seizure_end_times, subject_end_time, data, header):
  #rowcount is used to determine how many rows the file has.
  #This is needed to know how large the array should be
  rowcount=data.shape[1]

  print(data.shape)

  #label array will hold the time untill the next seizure in seconds
  label_array=[]
  dataset = np.memmap(file_name+'l', dtype='float32', mode='w+', shape=(rowcount,18))
  print(file_name+'l')

  #columns to keep determines which columns are correct to keep
  columns_to_keep, columns_to_kill=column_checker(header)

  data=np.delete(data,(columns_to_kill),0)

  for row in range(0,rowcount,600):
      label_array.append(int(assignLabel( row*.003906 + recording_start_time, seizure_start_times, seizure_end_times, subject_end_time ) ))
  dataset[:]=np.transpose(data[:])
  print(data.shape)
  dataset.flush()
  return rowcount,label_array

"""# MAIN"""

# All the files in these folders will be converted to bin files
folders = ['chb01']#['chb13','chb14','chb15','chb16','chb17','chb18','chb19','chb20','chb21','chb22','chb23','chb23','chb24']
remove_from_end= 60*30 #removes mo minutes from the end of a file
Remove_after_seizure=60*15 #Removes after each seizure.

for folder in folders:
  os.chdir(folder)
  eeg_files, file_start_times, seizure_start_times, seizure_end_times,subject_end_time = summaryReader(folder)
  print(seizure_start_times)
  # This for loop extends the length of each seizure to attempt to remove postictal data from the dataset.
  for i in range(1,len(seizure_end_times)):
    seizure_end_times[i]= seizure_end_times[i]+Remove_after_seizure
  print(seizure_end_times)

  for i in range(0,len(eeg_files)):
    print(eeg_files[i])
    data,header=convertEDF(str(eeg_files[i]))
    row_count,labels=convertFileToNP(eeg_files[i],file_start_times[i], seizure_start_times, seizure_end_times, subject_end_time, data, header)

    np.array(labels)
    np.save(eeg_files[i]+'labels',labels)
  os.chdir('..')

path='/content/drive/MyDrive/ERD/chb01'
os.chdir(path)
eeg_files, file_start_times, seizure_start_times, seizure_end_times,subject_end_time = summaryReader('chb01')
print("\n",seizure_start_times)

for i in range(1,len(seizure_end_times)):
  seizure_end_times[i]= seizure_end_times[i]+Remove_after_seizure
print(seizure_end_times)
#data,header=convertEDF('chb01_02')

#row_count,labels=convertFileToNP('chb01_02',file_start_times[1], seizure_start_times, seizure_end_times, subject_end_time, data, header)
#np.save('chb01_02labels',labels)